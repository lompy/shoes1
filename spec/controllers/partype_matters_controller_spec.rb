require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PartypeMattersController do

  # This should return the minimal set of attributes required to create a valid
  # Matter. As you add validations to Matter, be sure to
  # adjust the attributes here as well.
  let(:valid_partype_attribs){ {name: 'partype_name'} }
  let(:valid_matter_attribs) { {name: 'matter_name'} }
  let(:partype){ Partype.create!(valid_partype_attribs) }
  let(:matter) { Matter.create!(valid_matter_attribs) }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MattersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before(:all) do
    partype.matters << matter
  end

  describe "GET index" do
    it "assigns all matters as @records" do
      get :index, { partype_id: partype.id}, valid_session
      assigns(:records).should eq([matter])
    end
    it "does not assign matters as @records with wrong partype_id" do
      get :index, { partype_id: partype.id + 1}, valid_session
      assigns(:records).should eq([])
    end
  end

  describe "GET new" do
    it "assigns all other matters as @records" do
      Matter.all.each{|m| m.destroy unless m.id == matter.id }
      other_matter = Matter.create!(valid_matter_attribs)
      get :new, { partype_id: partype.id }, valid_session
      assigns(:records).should eq([other_matter])
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "adds new Matter to partype.matters" do
        Matter.create!(valid_matter_attribs)
        expect {
          post :create, {partype_id: partype.id, id: matter.id}, valid_session
        }.to change(partype.matters, :count).by(1)
      end

      it "assigns new matters list to @records" do
        partype.matters.clear
        post :create, {partype_id: partype.id, id: matter.id}, valid_session
        assigns(:records).should eq([matter])
      end
    end
  end

  describe "DELETE destroy" do
    it "does not destroys the matter" do
      expect {
        delete :destroy, {partype_id:partype.id, id: matter.id}, valid_session
      }.to change(Matter, :count).by(0)
    end
    it "removes the matter from partype list" do
      expect {
        delete :destroy, {partype_id:partype.id, id: matter.id}, valid_session
      }.to change(partype.matters, :count).by(-1)
    end

    it "assigns new matters list to @records" do
      partype.matters.clear
      partype.matters << matter
      delete :destroy, {partype_id:partype.id, id: matter.id}, valid_session
      assigns(:records).should eq([])
    end
  end

end
